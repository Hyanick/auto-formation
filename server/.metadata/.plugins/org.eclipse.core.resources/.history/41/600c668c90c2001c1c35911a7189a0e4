package controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import model.Product;
import repository.ProductRepository;

@RestController
@RequestMapping("/api")

public class ProductController {
	
	@Autowired
	private ProductRepository productRepository;
	
	
	
	
	
	 @GetMapping("/tutorials")
	  public ResponseEntity<List<Product>> getAllTutorials(@RequestParam(required = false) String title) {
	    try {
	      List<Product> tutorials = new ArrayList<Product>();
	      if (title == null)
	    	  productRepository.findAll().forEach(tutorials::add);
	      else
	    	 // productRepository.findByTitleContaining(title).forEach(tutorials::add);
	      if (tutorials.isEmpty()) {
	        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	      }
	      return new ResponseEntity<>(tutorials, HttpStatus.OK);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }
	
	
	
	
	
	
	
	@GetMapping("/products")
	public List<Product> getProducts(){
		return productRepository.findAll();
	}
	
	@RequestMapping(value = "/listPlats", method = RequestMethod.GET)
	public List<Product> getPlats(){
		return productRepository.findAll();
	}
	
	@RequestMapping(value = "/products/{id}", method = RequestMethod.GET)
	public Optional<Product> getProduct(@PathVariable Long id){
		return productRepository.findById(id); 		
	}
	
	@RequestMapping(value = "/addProduct", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public Product save(@RequestBody Product product) throws IOException {
		return productRepository.save(product); 
	}
	
	@RequestMapping(value = "/deleteProduct/{id}", method = RequestMethod.DELETE)
	public void delete(@PathVariable Long id) {
		productRepository.deleteById(id);		
	}
	
	@RequestMapping(value = "/editProduct/{id}", method = RequestMethod.PUT)
	public Product update (@PathVariable Long id, @RequestBody Product product) {
		product.setId(id);
		return productRepository.save(product);
	}

}
